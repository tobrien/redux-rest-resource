{"version":3,"sources":["../../src/reducers/index.js"],"names":["reducers","create","state","action","status","isCreating","items","body","fetch","isFetching","didInvalidate","contentRange","lastUpdated","receivedAt","get","isFetchingItem","didInvalidateItem","item","lastUpdatedItem","update","isUpdating","id","context","actionOpts","options","assignResponse","listItemIndex","findIndex","el","updatedItems","updatedItem","splice","slice","delete","isDeleting","filter","createReducers","name","namespace","String","type","startsWith","substr","length","toLowerCase","initialState"],"mappings":"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","file":"index.js","sourcesContent":["\n// http://facebook.github.io/react/docs/update.html\n\nimport {/* defaultState, */initialState} from './../defaults';\nimport {getNamespace} from './../types';\n\nconst reducers = {\n  create: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Add object to store as soon as possible?\n        return {...state,\n          isCreating: true\n          // items: [{\n          //   id: state.items.reduce((maxId, obj) => Math.max(obj.id, maxId), -1) + 1,\n          //   ...action.context\n          // }, ...state.items]\n        };\n      case 'resolved':\n        // Assign returned object\n        return {...state,\n          isCreating: false,\n          items: [...state.items, action.body]\n        };\n      case 'rejected':\n        return {...state,\n          isCreating: false\n        };\n      default:\n        return state;\n    }\n  },\n  fetch: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        return {...state,\n          isFetching: true,\n          didInvalidate: false\n        };\n      case 'resolved':\n        return {...state,\n          isFetching: false,\n          didInvalidate: false,\n          contentRange: action.contentRange,\n          items: action.body,\n          lastUpdated: action.receivedAt\n        };\n      case 'rejected':\n        return {...state,\n          isFetching: false,\n          didInvalidate: false\n        };\n      default:\n        return state;\n    }\n  },\n  get: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        return {...state,\n          isFetchingItem: true,\n          didInvalidateItem: false\n        };\n      case 'resolved':\n        return {...state,\n          isFetchingItem: false,\n          didInvalidateItem: false,\n          item: action.body,\n          lastUpdatedItem: action.receivedAt\n        };\n      case 'rejected':\n        return {...state,\n          isFetchingItem: false,\n          didInvalidateItem: false\n        };\n      default:\n        return state;\n    }\n  },\n  update: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Update object in store as soon as possible?\n        return {...state,\n          isUpdating: true\n        };\n      case 'resolved': {\n        // Assign context or returned object\n        const id = action.context.id || action.context;\n        const actionOpts = action.options || {};\n        const update = actionOpts.assignResponse ? action.body : action.context;\n        const listItemIndex = state.items.findIndex(el => el.id === id);\n        const updatedItems = state.items;\n        if (listItemIndex !== -1) {\n          const updatedItem = {...state.items.splice(listItemIndex, 1)[0], ...update};\n          updatedItems.splice(listItemIndex, 0, updatedItem);\n        }\n        const updatedItem = state.item && state.item.id === id\n          ? {...state.item, ...update}\n          : state.item;\n        return {...state,\n          isUpdating: false,\n          items: listItemIndex !== -1 ? updatedItems.slice() : updatedItems,\n          item: updatedItem\n        };\n      }\n      case 'rejected':\n        return {...state,\n          isUpdating: false\n        };\n      default:\n        return state;\n    }\n  },\n  delete: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Update object in store as soon as possible?\n        return {...state,\n          isDeleting: true\n        };\n      case 'resolved': // eslint-disable-line\n        const id = action.context.id || action.context;\n        return {...state,\n          isDeleting: false,\n          items: [...state.items.filter(el => el.id !== id)]\n        };\n      case 'rejected':\n        return {...state,\n          isDeleting: false\n        };\n      default:\n        return state;\n    }\n  }\n};\n\nconst createReducers = ({name}) => {\n  const namespace = `${getNamespace({name})}/`;\n  // const localInitialState = {\n  //   ...Object.keys(defaultState).reduce((soFar, key) => ({...soFar, ...defaultState[key]}), {}),\n  //   ...initialState\n  // };\n  return (state = {...initialState, name}, action) => {\n    // Only process relevant namespace\n    if (!String(action.type).startsWith(namespace)) {\n      return state;\n    }\n    // Only process relevant action type\n    const type = action.type.substr(namespace.length).toLowerCase();\n    if (reducers[type]) {\n      return reducers[type](state, action);\n    }\n    return state;\n  };\n};\n\nexport {initialState, reducers, createReducers};\n"]}