{"version":3,"sources":["../src/types.js"],"names":["getNamespace","name","getActionKey","pluralName","actionKey","actionOpts","actualPluralName","toUpperCase","isArray","getActionType","createTypes","actions","Object","keys","reduce","types","type","assign"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,yBACL,0BAAeA,IAAf,CADK;AAAA,CAArB;;AAGA,IAAMC,eAAe,SAAfA,YAAe,QAAoD;AAAA,MAAlDD,IAAkD,SAAlDA,IAAkD;AAAA,MAA5CE,UAA4C,SAA5CA,UAA4C;AAAA,MAAhCC,SAAgC,SAAhCA,SAAgC;AAAA,+BAArBC,UAAqB;AAAA,MAArBA,UAAqB,oCAAR,EAAQ;;AACvE;AACA,MAAMC,mBAAmBH,cAAiBF,IAAjB,MAAzB;AACA,SAAUG,UAAUG,WAAV,EAAV,SAAqC,0BAAeF,WAAWG,OAAX,GAAqBF,gBAArB,GAAwCL,IAAvD,CAArC;AACD,CAJD;;AAMA,IAAMQ,gBAAgB,SAAhBA,aAAgB;AAAA,MAAER,IAAF,SAAEA,IAAF;AAAA,MAAQG,SAAR,SAAQA,SAAR;AAAA;AACpB;AACGJ,iBAAa,EAACC,UAAD,EAAb,CAFiB,SAEOG,UAAUG,WAAV;AAFP;AAAA,CAAtB;;AAIA,IAAMG,cAAc,SAAdA,WAAc;AAAA,MAAET,IAAF,SAAEA,IAAF;AAAA,MAAQU,OAAR,SAAQA,OAAR;AAAA,SAClBC,OAAOC,IAAP,CAAYF,OAAZ,EAAqBG,MAArB,CAA4B,UAACC,KAAD,EAAQX,SAAR,EAAsB;AAChD,QAAMC,aAAaM,QAAQP,SAAR,CAAnB;AACA,QAAMY,OAAOP,cAAc,EAACR,UAAD,EAAOI,sBAAP,EAAmBD,oBAAnB,EAAd,CAAb;AACA,WAAOQ,OAAOK,MAAP,CAAcF,KAAd,sBAAuBb,aAAa,EAACD,UAAD,EAAOI,sBAAP,EAAmBD,oBAAnB,EAAb,CAAvB,EAAqEY,IAArE,EAAP;AACD,GAJD,EAIG,EAJH,CADkB;AAAA,CAApB;;QAOQN,W,GAAAA,W;QAAaV,Y,GAAAA,Y;QAAcE,Y,GAAAA,Y;QAAcO,a,GAAAA,a","file":"types.js","sourcesContent":["import {upperSnakeCase} from './helpers/util';\n\nconst getNamespace = ({name}) =>\n  `@@resource/${upperSnakeCase(name)}`;\n\nconst getActionKey = ({name, pluralName, actionKey, actionOpts = {}}) => {\n  // `${actionKey.toUpperCase()}`;\n  const actualPluralName = pluralName || `${name}s`;\n  return `${actionKey.toUpperCase()}_${upperSnakeCase(actionOpts.isArray ? actualPluralName : name)}`;\n};\n\nconst getActionType = ({name, actionKey}) =>\n  // `${actionKey.toUpperCase()}_${name.toUpperCase()}${action.isArray ? 'S' : ''}`;\n  `${getNamespace({name})}/${actionKey.toUpperCase()}`;\n\nconst createTypes = ({name, actions}) =>\n  Object.keys(actions).reduce((types, actionKey) => {\n    const actionOpts = actions[actionKey];\n    const type = getActionType({name, actionOpts, actionKey});\n    return Object.assign(types, {[getActionKey({name, actionOpts, actionKey})]: type});\n  }, {});\n\nexport {createTypes, getNamespace, getActionKey, getActionType};\n"]}