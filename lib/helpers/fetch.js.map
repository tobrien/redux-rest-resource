{"version":3,"sources":["../../src/helpers/fetch.js"],"names":["HttpError","statusCode","body","message","name","constructor","Error","captureStackTrace","stack","status","buildFetchUrl","url","urlParams","context","stripTrailingSlashes","protocolAndDomain","remainderUrl","builtUrl","Object","keys","reduce","wipUrl","urlParam","urlParamInfo","contextAsObject","id","value","encodedValue","isQueryParamValue","replace","buildFetchOpts","contextOpts","actionOpts","opts","headers","method","credentials","query","hasBody","test","JSON","stringify","fetch","options","queryParam","queryParamValue","Promise","resolve","then","res","ok","contentType","get","isJson"],"mappings":"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","file":"fetch.js","sourcesContent":["import baseFetch from 'isomorphic-fetch';\nimport {isObject, startsWith} from './util';\nimport {encodeUriQuery, encodeUriSegment, replaceUrlParamFromUrl, replaceQueryStringParamFromUrl, splitUrlByProtocolAndDomain} from './url';\nimport {defaultGlobals, defaultHeaders} from './../defaults';\n\nexport class HttpError extends Error {\n  constructor(statusCode = 500, {body, message = 'HttpError'}) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = (new Error(message)).stack;\n    }\n    // Http\n    this.statusCode = statusCode;\n    this.status = statusCode;\n    this.body = body;\n  }\n}\n\nexport const buildFetchUrl = ({url, urlParams, context, stripTrailingSlashes = true}) => {\n  const [protocolAndDomain, remainderUrl] = splitUrlByProtocolAndDomain(url);\n  // Replace urlParams with values from context\n  let builtUrl = Object.keys(urlParams).reduce((wipUrl, urlParam) => {\n    const urlParamInfo = urlParams[urlParam];\n    const contextAsObject = !isObject(context) ? {id: context} : context;\n    const value = contextAsObject[urlParam] || ''; // self.defaults[urlParam];\n    if (value) {\n      const encodedValue = urlParamInfo.isQueryParamValue ? encodeUriQuery(value, true) : encodeUriSegment(value);\n      return replaceUrlParamFromUrl(wipUrl, urlParam, encodedValue);\n    }\n    return replaceUrlParamFromUrl(wipUrl, urlParam);\n  }, remainderUrl);\n  // Strip trailing slashes and set the url (unless this behavior is specifically disabled)\n  if (stripTrailingSlashes) {\n    builtUrl = builtUrl.replace(/\\/+$/, '') || '/';\n  }\n  return protocolAndDomain + builtUrl;\n};\n\nexport const buildFetchOpts = ({context, contextOpts, actionOpts}) => {\n  const opts = {\n    headers: defaultHeaders\n  };\n  if (actionOpts.method) {\n    opts.method = actionOpts.method;\n  }\n  if (actionOpts.headers) {\n    opts.headers = {...opts.headers, ...actionOpts.headers};\n  }\n  if (actionOpts.credentials) {\n    opts.credentials = actionOpts.credentials;\n  }\n  if (contextOpts.query) {\n    opts.query = contextOpts.query;\n  }\n  const hasBody = /^(POST|PUT|PATCH)$/i.test(opts.method);\n  if (context && hasBody) {\n    opts.body = JSON.stringify(context);\n  }\n  return opts;\n};\n\nexport const fetch = (url, options = {}) => {\n  // Support options.query\n  const builtUrl = Object.keys(options.query || []).reduce((wipUrl, queryParam) => {\n    const queryParamValue = options.query[queryParam];\n    return replaceQueryStringParamFromUrl(wipUrl, queryParam, queryParamValue);\n  }, url);\n  return (options.Promise || defaultGlobals.Promise).resolve(baseFetch(builtUrl, options))\n    .then((res) => {\n      if (!res.ok) {\n        const contentType = res.headers.get('Content-Type');\n        const isJson = startsWith(contentType, 'application/json');\n        return res[isJson ? 'json' : 'text']().then((body) => {\n          throw new HttpError(res.status, {body});\n        });\n      }\n      return res;\n    });\n};\n\nexport default fetch;\n"]}